[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ml-bug-prediction"
version = "2.0.0"
description = "AI-powered JIRA bug risk analysis and prediction system"
readme = "docs/README.md"
license = {file = "LICENSE"}
authors = [
    {name = "QA Engineering Team", email = "qa-team@company.com"}
]
maintainers = [
    {name = "QA Engineering Team", email = "qa-team@company.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: proprietary commercial License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.8"
dependencies = [
    "flask>=2.0.0",
    "jira>=3.4.0",
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "plotly>=5.0.0",
    "scikit-learn>=1.0.0",
    "requests>=2.25.0",
    "python-dateutil>=2.8.0",
    "schedule>=1.1.0",
    "textblob>=0.17.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "isort>=5.10.0",
]
notebook = [
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
]

[project.urls]
Homepage = "https://github.com/QAPournima/RiskAnalysis-AI-ML"
Repository = "https://github.com/QAPournima/RiskAnalysis-AI-ML"
Issues = "https://github.com/QAPournima/RiskAnalysis-AI-ML/issues"

[project.scripts]
ml-bug-dashboard = "ml_bug_prediction.app:main"
ml-bug-setup = "scripts.setup_environment:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"ml_bug_prediction" = ["templates/*.html", "static/**/*"]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | venv_local
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
src_paths = ["src", "scripts"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "jira.*",
    "plotly.*",
    "textblob.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["src/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src/ml_bug_prediction",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
]

[tool.coverage.run]
source = ["src/ml_bug_prediction"]
oproprietary commercial = [
    "*/tests/*",
    "*/venv/*",
    "*/venv_local/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 